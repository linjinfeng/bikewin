{
  "_args": [
    [
      {
        "raw": "js-xdr@https://registry.npmjs.org/js-xdr/-/js-xdr-1.0.0.tgz",
        "scope": null,
        "escapedName": "js-xdr",
        "name": "js-xdr",
        "rawSpec": "https://registry.npmjs.org/js-xdr/-/js-xdr-1.0.0.tgz",
        "spec": "https://registry.npmjs.org/js-xdr/-/js-xdr-1.0.0.tgz",
        "type": "remote"
      },
      "/Users/jeffrey/src/jss/follow_tutorial/bikewin/node_modules/stellar-base"
    ]
  ],
  "_from": "js-xdr@1.0.0",
  "_id": "js-xdr@1.0.0",
  "_inCache": true,
  "_location": "/stellar-base/js-xdr",
  "_phantomChildren": {},
  "_requested": {
    "raw": "js-xdr@https://registry.npmjs.org/js-xdr/-/js-xdr-1.0.0.tgz",
    "scope": null,
    "escapedName": "js-xdr",
    "name": "js-xdr",
    "rawSpec": "https://registry.npmjs.org/js-xdr/-/js-xdr-1.0.0.tgz",
    "spec": "https://registry.npmjs.org/js-xdr/-/js-xdr-1.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/stellar-base"
  ],
  "_resolved": "https://registry.npmjs.org/js-xdr/-/js-xdr-1.0.0.tgz",
  "_shasum": "91fad1c94b6d3300228e717c135e6c196fa2bcee",
  "_shrinkwrap": null,
  "_spec": "js-xdr@https://registry.npmjs.org/js-xdr/-/js-xdr-1.0.0.tgz",
  "_where": "/Users/jeffrey/src/jss/follow_tutorial/bikewin/node_modules/stellar-base",
  "author": {
    "name": "Scott Fleckenstein",
    "email": "scott@stellar.org"
  },
  "bugs": {
    "url": "https://github.com/stellar/js-xdr/issues"
  },
  "dependencies": {
    "babel-runtime": "^4.7.16",
    "cursor": "^0.1.5",
    "lodash": "^3.5.0",
    "long": "^2.2.3",
    "sequencify": "0.0.7"
  },
  "description": "Read/write XDR encoded data structures (RFC 4506)",
  "devDependencies": {
    "babel": "^4.7.16",
    "babel-core": "^4.7.16",
    "babel-loader": "^4.3.0",
    "chai": "^2.2.0",
    "express": "^4.9.8",
    "ghooks": "^0.3.0",
    "gulp": "^3.8.11",
    "gulp-babel": "^4.0.1",
    "gulp-coveralls": "^0.1.3",
    "gulp-git": "~0.5.3",
    "gulp-jshint": "^1.10.0",
    "gulp-load-plugins": "^0.9.0",
    "gulp-mocha": "^2.0.1",
    "gulp-plumber": "^1.0.0",
    "gulp-rename": "~1.2.0",
    "gulp-rimraf": "~0.1.0",
    "gulp-uglify": "~0.3.1",
    "gulp-webpack": "^1.3.1",
    "istanbul": "~0.3.2",
    "jshint-stylish": "^1.0.1",
    "karma": "^0.13.9",
    "karma-chrome-launcher": "^0.1.7",
    "karma-firefox-launcher": "^0.1.6",
    "karma-mocha": "^0.1.10",
    "karma-phantomjs-launcher": "^0.1.4",
    "karma-sinon-chai": "^0.3.0",
    "karma-webpack": "^1.7.0",
    "mocha": "~1.17.1",
    "run-sequence": "^1.0.2",
    "sinon": "^1.14.1",
    "sinon-chai": "^2.7.0",
    "webpack": "^1.12.0"
  },
  "homepage": "https://github.com/stellar/js-xdr",
  "keywords": [],
  "license": "Apache 2.0",
  "main": "lib/index.js",
  "name": "js-xdr",
  "optionalDependencies": {},
  "readme": "# XDR, for Javascript\n\nRead/write XDR encoded data structures (RFC 4506)\n\n[![Travis build status](http://img.shields.io/travis/stellar/js-xdr.svg?style=flat)](https://travis-ci.org/stellar/js-xdr)\n[![Code Climate](https://codeclimate.com/github/stellar/js-xdr/badges/gpa.svg)](https://codeclimate.com/github/stellar/js-xdr)\n[![Dependency Status](https://david-dm.org/stellar/js-xdr.svg)](https://david-dm.org/stellar/js-xdr)\n[![devDependency Status](https://david-dm.org/stellar/js-xdr/dev-status.svg)](https://david-dm.org/stellar/js-xdr#info=devDependencies)\n\nXDR is an open data format, specified in [RFC 4506](http://tools.ietf.org/html/rfc4506.html).  This library provides a way to read and write XDR data from javascript.  It can read/write all of the primitive XDR types and also provides facilities to define readers for the compound XDR types (enums, structs and unions)\n\n## Installation\n\nvia npm:\n\n```shell\nnpm install --save js-xdr\n```\n\n## Usage\n\nYou can find some [examples here.](examples)\n\nFirst, let's import the library:\n\n```javascript\nvar xdr = require(\"js-xdr\");\n```\n\nNow, let's look at how to decode some primitive types:\n\n```javascript\n// booleans\nxdr.Bool.fromXDR([0,0,0,0]) // returns false\nxdr.Bool.fromXDR([0,0,0,1]) // returns true\n\n// the inverse of `fromXDR` is `toXDR`, which returns a Buffer\nxdr.Bool.toXDR(true) // returns new Buffer([0,0,0,1])\n\n// XDR ints and unsigned ints can be safely represented as\n// a javascript number\n\nxdr.Int.fromXDR([0xFF,0xFF,0xFF,0xFF]) // returns -1\nxdr.UnsignedInt.fromXDR([0xFF,0xFF,0xFF,0xFF]) // returns 4294967295\n\n// XDR Hypers, however, cannot be safely represented in the 53-bits\n// of precision we get with javascript numbers, and so we have a custom class \n// for those numbers.  Hyper and UnsignedHyper both use \n//https://www.npmjs.com/package/long to represent the 64-bit numbers\n\nvar result = xdr.Hyper.fromXDR([0,0,0,0,0,0,0,0]) // returns an instance of xdr.Hyper\n\n// convert the hyper to a string\nresult.toString() // return '0'\n\n// math!\nvar ten = result.add(10)\nvar minusone = result.subtract(1)\n\n// construct a number from a string\nvar big = xdr.Hyper.fromString(\"1099511627776\")\n\n// encode the hyper back into xdr\nbig.toXDR() // <Buffer 00 00 01 00 00 00 00 00> \n```\n\n\n## Caveats\n\nThere are a couple of caveats to be aware of with this library:\n\n1.  We do not support quadruple precision floating point values.  Attempting to read or write these values will throw errors.\n2.  NaN is not handled perfectly for floats and doubles.  There are several forms of NaN as defined by IEEE754 and the browser polyfill for node's Buffer class seems to handle them poorly.  \n\n\n## Code generation\n\njs-xdr by itself does not have any ability to parse XDR IDL files and produce a parser for your custom data types.  Instead, that is the responsibility of [xdrgen](http://github.com/stellar/xdrgen).  xdrgen will take your .x files and produce a javascript file that target this library to allow for your own custom types.\n\nSee [js-stellar-base](http://github.com/stellar/js-stellar-base) for an example (check out the src/generated directory)\n\n## Contributing\n\nPlease [see CONTRIBUTING.md for details](CONTRIBUTING.md).\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stellar/js-xdr.git"
  },
  "scripts": {
    "test": "gulp test",
    "test-generate": "bundle exec xdrgen -o generated -n test -l javascript examples/test.x"
  },
  "version": "1.0.0"
}
